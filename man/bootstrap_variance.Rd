% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap_var.R
\name{bootstrap_variance}
\alias{bootstrap_variance}
\title{Bootstrap variance}
\usage{
bootstrap_variance(
  obj_hte,
  params_p_score,
  params_impute_y,
  params_OR,
  n_boot = 1000,
  estimated_tau,
  seed = 1
)
}
\arguments{
\item{obj_hte}{Object to estimate hte}

\item{params_p_score}{List with parameters to fit propensity score:
\itemize{
\item model_formula - model formula,
\item method - estimation method, choose between: \code{EBLUP},
\code{MQ}, \code{RF}, \code{XGB},
\item tune_RF - tune random forest parameters,
\item xgboost_params - list of parameters to obtain predictions
using gradient boosting, default: \code{CV_XGB = TRUE},
\code{nfolds = 5}, \code{nrounds = 50}.
}}

\item{params_impute_y}{List with parameters to fit imputation model:
\itemize{
\item model_formula - model formula,
\item method - estimation method, choose between: \code{EBLUP},
\code{MQ}, \code{RF}, \code{XGB},
\item tune_RF - tune random forest parameters,
\item xgboost_params - list of parameters to obtain predictions
using gradient boosting, default: \code{CV_XGB = TRUE},
\code{nfolds = 5}, \code{nrounds = 50}.
\item type_model - type of outcome.
}}

\item{params_OR}{List with parameters to fit outcome regression model:
\itemize{
\item model_formula - model formula,
\item method - estimation method, choose between: \code{EBLUP},
\code{MQ}, \code{RF}, \code{XGB},
\item tune_RF - tune random forest parameters,
\item xgboost_params - list of parameters to obtain predictions
using gradient boosting, default: \code{CV_XGB = TRUE},
\code{nfolds = 5}, \code{nrounds = 50}.
\item type_model - type of outcome.
}}

\item{n_boot}{Number of bootstrap samples}

\item{estimated_tau}{Estimated value of parameter tau}

\item{seed}{Seed to repeat the simulations}
}
\value{
\item{var_tau}{Bootstrap variance of parameter tau}
}
\description{
Calculate bootstrap variance
}
\examples{

m = 50
ni = rep(5, m)
Ni = rep(100, m)
N = sum(Ni)
n = sum(ni)

X <- generate_X(
 n = N,
 p = 1,
 covariance_norm = NULL,
 cov_type = "unif",
 seed = 1
)

X_outcome <- generate_X(
 n = N,
 p = 1,
 covariance_norm = NULL,
 cov_type = "lognorm",
 seed = 1
)

populations <- generate_pop(X, X_outcome,
coeffs = get_default_coeffs(),
errors_outcome = get_default_errors_outcome(),
rand_eff_outcome = get_default_rand_eff_outcome(),
rand_eff_p_score = get_default_rand_eff_p_score(),
regression_type = "continuous",
Ni_size  = 100,
m = 50,
no_sim = 1,
seed = 1)

samples <- generate_sample(populations, ni_size = 5,
                           sample_part = "sampled",
                           get_index = TRUE)

data_sample <- data.frame(samples[[1]]$samp_data)
index_sample <- samples[[1]]$index_s
data_out_of_sample <- populations[-index_sample, ]


ht_OR <- hte(type_hte = "OR",
             data_sample,
             data_out_of_sample,
             params_p_estimate = NULL,
             params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
                              method = "EBLUP",
                              tune_RF = FALSE,
                              xgboost_params = list(CV_XGB = TRUE,
                                                    nfolds = 5,
                                                    nrounds = 50),
                               type_model = "gaussian"))

estimated_tau <- ht_OR$tau

obj_hte <- list(data_sample = data_sample,
               data_out_of_sample = data_out_of_sample)
class(obj_hte) <- "OR"


boot_var <- bootstrap_variance(obj_hte = obj_hte,
                               params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
                                                method = "EBLUP",
                                                tune_RF = FALSE,
                                                xgboost_params = list(CV_XGB = TRUE,
                                                                      nfolds = 5,
                                                                      nrounds = 50),
                                                          type_model = "gaussian"),
                               n_boot = 100,
                               estimated_tau = estimated_tau,
                               seed = 1)




}
