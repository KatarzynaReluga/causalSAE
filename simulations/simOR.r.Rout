
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

.Rprofile: Setting Switzerland repository
> # Model based simulations
> setwd("./causalSAE")
> devtools::load_all()
Loading CausalSAE
Registered S3 methods overwritten by 'tibble':
  method     from  
  format.tbl pillar
  print.tbl  pillar
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang
There were 11 warnings (use warnings() to see them)
> 
> # Set seed
> set.seed(100)
> 
> m = 50
> ni = rep(10, m)
> Ni = rep(100, m)
> N = sum(Ni)
> n = sum(ni)
> 
> n_boot = 500
> 
> # Generate covariates
> X <- generate_X(
+   n = N,
+   p = 1,
+   covariance_norm = NULL,
+   cov_type = "unif",
+   seed = 1
+ )
> 
> X_outcome <- generate_X(
+   n = N,
+   p = 1,
+   covariance_norm = NULL,
+   cov_type = "lognorm",
+   seed = 1
+ )
> 
> # Generate populations
> populations <- generate_pop(X, X_outcome,
+                             coeffs = get_default_coeffs(),
+                             errors_outcome = get_default_errors_outcome(),
+                             rand_eff_outcome = get_default_rand_eff_outcome(),
+                             rand_eff_p_score = get_default_rand_eff_p_score(),
+                             regression_type = "continuous",
+                             Ni_size = 100,
+                             m = 50,
+                             no_sim = 1,
+                             seed = 10)
> 
> 
> a = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
> # Simple checks of the code ------------------------------------------------------------------
> #for (i in 1:NoSim) {
> #a  = Sys.time()
> #  print(i)
>   set.seed(a * 2022)
> 
>   subpopulation <- sample_subpopulations(populations, frac_nc = 0.05, frac_nt = 0.05)
>   data_sample <- data.frame(populations[subpopulation, ])
>   data_out_of_sample <- populations[-subpopulation, ]
> 
> 
>   # OR -------------------------------------------------------------------
>   # EBLUP OR
>   EBLUP_ORf <- hte(type_hte = "OR",
+                 data_sample,
+                 data_out_of_sample,
+                 params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                   method = "EBLUP",
+                                   tune_RF = FALSE,
+                                   xgboost_params = list(CV_XGB = TRUE,
+                                                         nfolds = 5,
+                                                         nrounds = 50),
+                                                         type_model = "gaussian"))
>   EBLUP_OR <- EBLUP_ORf$tau
> 
>   # MQ OR
>   MQ_ORf <- hte(type_hte = "OR",
+                    data_sample,
+                    data_out_of_sample,
+                    params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                     method = "MQ",
+                                     tune_RF = FALSE,
+                                     xgboost_params = list(CV_XGB = TRUE,
+                                                           nfolds = 5,
+                                                           nrounds = 50),
+                                     type_model = "continuous"))
>   MQ_OR <- MQ_ORf$tau
> 
>   # RF OR
> 
>   RF_ORf <- hte(type_hte = "OR",
+                 data_sample,
+                 data_out_of_sample,
+                 params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                  method = "RF",
+                                  tune_RF = FALSE,
+                                  xgboost_params = list(CV_XGB = TRUE,
+                                                        nfolds = 5,
+                                                        nrounds = 50),
+                                  type_model = "continuous"))
>   RF_OR <- RF_ORf$tau
> 
>   # EBLUP XGB
> 
>   XGB_ORf <- hte(type_hte = "OR",
+                 data_sample,
+                 data_out_of_sample,
+                 params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                  method = "XGB",
+                                  tune_RF = FALSE,
+                                  xgboost_params = list(CV_XGB = FALSE,
+                                                        nfolds = 5,
+                                                        nrounds = 50),
+                                  type_model = "continuous"))
>   XGB_OR <- XGB_ORf$tau
> 
> 
>   # Bootstrap samples ----------------------------------------------------------------------
> 
>   bootstrap_indices <- sample_bootstrap_indices(sample_sizes = as.data.frame(table(data_sample$group))$Freq,
+                                                 out_of_sample_sizes = as.data.frame(table(data_out_of_sample$group))$Freq,
+                                                 n_boot = n_boot,
+                                                 seed = 2 * a)
> 
>   EBLUP_var = matrix(0, nrow = n_boot, ncol = m)
>   MQ_var = matrix(0, nrow = n_boot, ncol = m)
>   RF_var = matrix(0, nrow = n_boot, ncol = m)
>   XGB_var = matrix(0, nrow = n_boot, ncol = m)
> #}
> 
> 
>   for (i in 1:n_boot) {
+     #print(i)
+     # Modulus operation
+     if(i %% 10==0) {
+       # Print on the screen some message
+       cat(paste0("Bootstrap iteration: ", i, "\n"))
+     }
+     # Bootstrap samples ---------------------------------------------------------
+ 
+     index_sample <- bootstrap_indices[[i]]$ind_sample
+     data_sample_boot <- data_sample[index_sample, ]
+     row.names(data_sample_boot) <- 1 : dim(data_sample_boot)[1]
+ 
+     # Bootstrap out of sample ----------------------------------------------------
+ 
+     index_out_of_sample <- bootstrap_indices[[i]]$ind_population
+     data_out_of_sample_boot <- data_out_of_sample[index_out_of_sample, ]
+     row.names(data_out_of_sample_boot) <- 1 : dim(data_out_of_sample_boot)[1]
+ 
+     # Create object of class hte --------------------------------------------------
+ 
+     #EBLUP OR
+     obj_hte_boot <- list(data_sample = data_sample_boot,
+                          data_out_of_sample = data_out_of_sample_boot)
+ 
+     class(obj_hte_boot) <- "OR"
+ 
+     # EBLUP --------------------------------------
+     EBLUP_var[i, ] <-  hte(type_hte = "OR",
+                            data_sample = data_sample_boot,
+                            data_out_of_sample = data_out_of_sample_boot,
+                            params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                             method = "EBLUP",
+                                             tune_RF = FALSE,
+                                             xgboost_params = list(CV_XGB = TRUE,
+                                                                   nfolds = 5,
+                                                                   nrounds = 50),
+                                             type_model = "gaussian"))$tau
+ 
+     # MQ ------------------------------------------------------
+     MQ_var[i, ] <-  hte(type_hte = "OR",
+                         data_sample = data_sample_boot,
+                         data_out_of_sample = data_out_of_sample_boot,
+                         params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                          method = "MQ",
+                                          tune_RF = FALSE,
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50),
+                                          type_model = "continuous"))$tau
+ 
+     # RF ----------------------------------------------------------
+     RF_var[i, ] <- hte(type_hte = "OR",
+                        data_sample = data_sample_boot,
+                        data_out_of_sample = data_out_of_sample_boot,
+                        params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                    method = "RF",
+                                    tune_RF = FALSE,
+                                    xgboost_params = list(CV_XGB = TRUE,
+                                                          nfolds = 5,
+                                                          nrounds = 50),
+                                    type_model = "continuous"))$tau
+ 
+     # XGB --------------------------------------------------------------------
+     XGB_var[i, ] <- hte(type_hte = "OR",
+                    data_sample = data_sample_boot,
+                    data_out_of_sample = data_out_of_sample_boot,
+                    params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                     method = "XGB",
+                                     tune_RF = FALSE,
+                                     xgboost_params = list(CV_XGB = FALSE,
+                                                           nfolds = 5,
+                                                           nrounds = 50),
+                                     type_model = "continuous"))$tau
+ 
+   }
Bootstrap iteration: 10
Bootstrap iteration: 20
Bootstrap iteration: 30
Bootstrap iteration: 40
Bootstrap iteration: 50
Bootstrap iteration: 60
Bootstrap iteration: 70
Bootstrap iteration: 80
Bootstrap iteration: 90
Bootstrap iteration: 100
Bootstrap iteration: 110
Bootstrap iteration: 120
Bootstrap iteration: 130
Bootstrap iteration: 140
Bootstrap iteration: 150
Bootstrap iteration: 160
Bootstrap iteration: 170
Bootstrap iteration: 180
Bootstrap iteration: 190
Bootstrap iteration: 200
Bootstrap iteration: 210
Bootstrap iteration: 220
Bootstrap iteration: 230
Bootstrap iteration: 240
Bootstrap iteration: 250
Bootstrap iteration: 260
Bootstrap iteration: 270
Bootstrap iteration: 280
Bootstrap iteration: 290
Bootstrap iteration: 300
Bootstrap iteration: 310
Bootstrap iteration: 320
Bootstrap iteration: 330
Bootstrap iteration: 340
Bootstrap iteration: 350
Bootstrap iteration: 360
Bootstrap iteration: 370
Bootstrap iteration: 380
Bootstrap iteration: 390
Bootstrap iteration: 400
Bootstrap iteration: 410
Bootstrap iteration: 420
Bootstrap iteration: 430
Bootstrap iteration: 440
Bootstrap iteration: 450
Bootstrap iteration: 460
Bootstrap iteration: 470
Bootstrap iteration: 480
Bootstrap iteration: 490
Bootstrap iteration: 500
> #  b = Sys.time()
>   EBLUP_OR_var <- colMeans((EBLUP_var - EBLUP_OR) ^ 2)
>   MQ_OR_var <- colMeans((MQ_var - MQ_OR) ^ 2)
>   RF_OR_var <- colMeans((RF_var - RF_OR) ^ 2)
>   XGB_OR_var <- colMeans((XGB_var - XGB_OR) ^ 2)
> 
> 
>   ###########################################################################
>   # Store results in the list - standard for baobab.                         #
>   ############################################################################
>   Results = list(EBLUP_OR = EBLUP_OR,
+                  MQ_OR = MQ_OR,
+                  RF_OR = RF_OR,
+                  XGB_OR = XGB_OR,
+ 
+                  EBLUP_OR_var = EBLUP_OR_var,
+                  MQ_OR_var = MQ_OR_var,
+                  RF_OR_var = RF_OR_var,
+                  XGB_OR_var = XGB_OR_var)
> 
>   outputName = paste("sim_OR_", a, ".RData",sep="")
>   outputPath = file.path("/home/reluga/Comp", outputName)
>   #outputPath=file.path("C:/Users/katar/Documents/Paper_3/sim_P_30u1e1",outputName)
>   save("Results", file = outputPath)
> 
> 
> 
> proc.time()
    user   system  elapsed 
2260.532   87.670 2353.708 
###
>   Results = list(EBLUP_OR = EBLUP_OR,
+                  MQ_OR = MQ_OR,
+                  RF_OR = RF_OR,
+                  XGB_OR = XGB_OR,
+ 
+                  EBLUP_OR_var = EBLUP_OR_var,
+                  MQ_OR_var = MQ_OR_var,
+                  RF_OR_var = RF_OR_var,
+                  XGB_OR_var = XGB_OR_var)
> 
>   outputName = paste("sim_OR_", a, ".RData",sep="")
>   outputPath = file.path("/home/reluga/Comp", outputName)
>   #outputPath=file.path("C:/Users/katar/Documents/Paper_3/sim_P_30u1e1",outputName)
>   save("Results", file = outputPath)
> 
> 
> 
> proc.time()
    user   system  elapsed 
2183.040   83.074 2270.667 
