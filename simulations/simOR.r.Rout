
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

.Rprofile: Setting Switzerland repository
> # Model based simulations
> setwd("./causalSAE")
> devtools::load_all()
Loading CausalSAE
Registered S3 methods overwritten by 'tibble':
  method     from  
  format.tbl pillar
  print.tbl  pillar
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang
There were 11 warnings (use warnings() to see them)
> 
> # Set seed
> set.seed(100)
> 
> m = 50
> ni = rep(10, m)
> Ni = rep(100, m)
> N = sum(Ni)
> n = sum(ni)
> 
> n_boot = 500
> 
> # Generate covariates
> X <- generate_X(
+   n = N,
+   p = 1,
+   covariance_norm = NULL,
+   cov_type = "unif",
+   seed = 1
+ )
> 
> X_outcome <- generate_X(
+   n = N,
+   p = 1,
+   covariance_norm = NULL,
+   cov_type = "lognorm",
+   seed = 1
+ )
> 
> # Generate populations
> populations <- generate_pop(X, X_outcome,
+                             coeffs = get_default_coeffs(),
+                             errors_outcome = get_default_errors_outcome(),
+                             rand_eff_outcome = get_default_rand_eff_outcome(),
+                             rand_eff_p_score = get_default_rand_eff_p_score(),
+                             regression_type = "continuous",
+                             Ni_size = 100,
+                             m = 50,
+                             no_sim = 1,
+                             seed = 10)
> 
> #tau_true <- calculate_tau(list(populations), type_tau = "H")[[1]]
> 
> y1 <- populations$y1
> y0 <- populations$y0
> group <- populations$group
> tau_treat <- aggregate(y1, list(group), FUN = mean)$x
> tau_untreat <- aggregate(y0, list(group), FUN = mean)$x
> tau_true = tau_treat - tau_untreat
> 
> 
> a = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
> # Simple checks of the code ------------------------------------------------------------------
> #for (i in 1:NoSim) {
> #a  = Sys.time()
> #  print(i)
>   set.seed(a * 2022)
> 
>   subpopulation <- sample_subpopulations(populations,
+                                          frac_nc = 0.1, frac_nt = 0.1,
+                                          seed = set.seed(a * 2022))
>   data_sample <- data.frame(populations[subpopulation, ])
>   data_out_of_sample <- populations[-subpopulation, ]
> 
> 
>   # OR -------------------------------------------------------------------
>   # EBLUP OR
>   EBLUP_ORf <- hte(type_hte = "OR",
+                 data_sample,
+                 data_out_of_sample,
+                 params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                  method = "EBLUP",
+                                  type_model = "gaussian"))
>   EBLUP_OR <- EBLUP_ORf$tau
> 
>   # MQ OR
>   MQ_ORf <- hte(type_hte = "OR",
+                    data_sample,
+                    data_out_of_sample,
+                    params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                     method = "MQ",
+                                     type_model = "continuous"))
>   MQ_OR <- MQ_ORf$tau
> 
>   # RF OR
> 
>   RF_ORf <- hte(type_hte = "OR",
+                 data_sample,
+                 data_out_of_sample,
+                 params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                  method = "RF",
+                                  tune_RF = FALSE))
>   RF_OR <- RF_ORf$tau
> 
>   # EBLUP XGB
> 
>   XGB_ORf <- hte(type_hte = "OR",
+                 data_sample,
+                 data_out_of_sample,
+                 params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                  method = "XGB",
+                                  xgboost_params = list(CV_XGB = FALSE,
+                                                        nfolds = 5,
+                                                        nrounds = 50)))
>   XGB_OR <- XGB_ORf$tau
> 
> 
>   # Bootstrap samples ----------------------------------------------------------------------
>   bootstrap_indices <- sample_bootstrap_indices(sample_sizes = as.data.frame(table(data_sample$group))$Freq,
+                                                 out_of_sample_sizes = as.data.frame(table(data_out_of_sample$group))$Freq,
+                                                 type_boot = "both",
+                                                 n_boot = n_boot,
+                                                 seed = 2 * a)
> 
>   EBLUP_var = matrix(0, nrow = n_boot, ncol = m)
>   MQ_var = matrix(0, nrow = n_boot, ncol = m)
>   RF_var = matrix(0, nrow = n_boot, ncol = m)
>   XGB_var = matrix(0, nrow = n_boot, ncol = m)
> #}
> 
> 
>   for (i in 1:n_boot) {
+     #print(i)
+     # Modulus operation
+     if(i %% 10==0) {
+       # Print on the screen some message
+       cat(paste0("Bootstrap iteration: ", i, "\n"))
+     }
+     # Bootstrap samples ---------------------------------------------------------
+ 
+     index_sample <- bootstrap_indices[[i]]$ind_sample
+     data_sample_boot <- data_sample[index_sample, ]
+     row.names(data_sample_boot) <- 1 : dim(data_sample_boot)[1]
+ 
+     # Bootstrap out of sample ----------------------------------------------------
+ 
+     index_out_of_sample <- bootstrap_indices[[i]]$ind_population
+     data_out_of_sample_boot <- data_out_of_sample[index_out_of_sample, ]
+     row.names(data_out_of_sample_boot) <- 1 : dim(data_out_of_sample_boot)[1]
+ 
+     # Create object of class hte --------------------------------------------------
+ 
+     #EBLUP OR
+     obj_hte_boot <- list(data_sample = data_sample_boot,
+                          data_out_of_sample = data_out_of_sample_boot)
+ 
+     class(obj_hte_boot) <- "OR"
+ 
+     # EBLUP --------------------------------------
+     EBLUP_var[i, ] <-  hte(type_hte = "OR",
+                            data_sample = data_sample_boot,
+                            data_out_of_sample = data_out_of_sample_boot,
+                            params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                             method = "EBLUP",
+                                             type_model = "gaussian"))$tau
+ 
+     # MQ ------------------------------------------------------
+     MQ_var[i, ] <-  hte(type_hte = "OR",
+                         data_sample = data_sample_boot,
+                         data_out_of_sample = data_out_of_sample_boot,
+                         params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                          method = "MQ",
+                                          tune_RF = FALSE,
+                                          type_model = "continuous"))$tau
+ 
+     # RF ----------------------------------------------------------
+     RF_var[i, ] <- hte(type_hte = "OR",
+                        data_sample = data_sample_boot,
+                        data_out_of_sample = data_out_of_sample_boot,
+                        params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                    method = "RF",
+                                    tune_RF = FALSE))$tau
+ 
+     # XGB --------------------------------------------------------------------
+     XGB_var[i, ] <- hte(type_hte = "OR",
+                    data_sample = data_sample_boot,
+                    data_out_of_sample = data_out_of_sample_boot,
+                    params_OR = list(model_formula = y ~ X1 + Xo1 + (1|group),
+                                     method = "XGB",
+                                     xgboost_params = list(CV_XGB = FALSE,
+                                                           nfolds = 5,
+                                                           nrounds = 50)))$tau
+ 
+   }
Bootstrap iteration: 10
