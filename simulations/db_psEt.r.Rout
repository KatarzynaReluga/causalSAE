
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

.Rprofile: Setting Switzerland repository
> library(dplyr)
Registered S3 methods overwritten by 'tibble':
  method     from  
  format.tbl pillar
  print.tbl  pillar

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> data_survey <- read.csv2("data_filtered_survey.csv")
> setwd("./causalSAE")
> devtools::load_all()
Loading CausalSAE
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang

Attaching package: ‘testthat’

The following object is masked from ‘package:dplyr’:

    matches

There were 11 warnings (use warnings() to see them)
> 
> # Read and pre_process data
> 
> data_survey_inc <- data_survey[, -c(17)]
> data_survey_inc <- data_survey_inc %>% filter(eq_house_disp_inc > 0)
> y = log(data_survey_inc$eq_house_disp_inc)
> data_survey_inc$y <- y
> 
> # Standardize count variables
> data_survey_inc$age <- scale(data_survey_inc$age,
+                              center = T, scale = T)
> 
> data_survey_inc$house_size <- scale(data_survey_inc$house_size,
+                              center = T, scale = T)
> 
> data_pop <- data_survey_inc %>%
+   rename(A  = type_contract,
+          group  = province) %>%
+   select(-eq_house_disp_inc)
> #plot(density(data_pop$y))
> ####################################################################################
> # Estimate the propensity score
> ####################################################################################
> # Drop: single, edu0
> 
> #formula_p_score = A ~ X1 + (1|group)
> formula_p_score = A ~ sex + nationality + age + house_size + married +
+   separated + widowed + divorced  + edu1 + edu2 + edu3 + (1|group)
> 
> # EBLUP
> 
> obj_p_score_EBLUP <- list(data_p_score = data_pop)
> class(obj_p_score_EBLUP) <- "EBLUP"
> 
> ps_hat_EBLUP <-  p_score(obj_p_score = obj_p_score_EBLUP,
+                          model_formula = formula_p_score)
boundary (singular) fit: see help('isSingular')
> 
> data_pop$p_score <- ps_hat_EBLUP
> 
> tauL <- calculate_tau(list(data_pop), type_tau = "H")
> 
> tau_true = tauL[[1]]$tau
> tau_treat = tauL[[1]]$tau_treat
> tau_untreat = tauL[[1]]$tau_untreat
> ####################################################################################
> ## Design based simulations
> ####################################################################################
> 
> Ni = as.numeric(table(data_pop$group))
> Nc = as.numeric(table(data_pop$group[data_pop$A == 0]))
> Nt = as.numeric(table(data_pop$group[data_pop$A == 1]))
> 
> N = sum(Ni)
> m = length(unique(data_pop$group))
> 
> nic <- round(0.1 * Nc)
> nic[which(nic == 0)] <- 1
> nit <- round(0.1 * Nt)
> nit[which(nit == 0)] <- 1
> ni = nic + nit
> n <- sum(ni)
> 
> # Drop: single, edu0
> #
> formula_y = y ~ sex + nationality + age + house_size  + married +
+   separated + widowed + divorced  + edu1 + edu2 + edu3 + A + (1 + A||group)
> 
> formula_y_OR = y ~ sex + nationality + age + house_size  + married +
+   separated + widowed + divorced  + edu1 + edu2 + edu3 + (1|group)
> 
> formula_y_impute = y ~ sex + nationality + age + house_size  + married +
+   separated + widowed + divorced  + edu1 + edu2 + edu3 + (1 + A||group)
> 
> formula_p_score = A ~ sex + nationality + age + house_size + married +
+   separated + widowed + divorced  + edu1 + edu2 + edu3 + (1|group)
> 
> a = as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
> # Simple checks of the code ------------------------------------------------------------------
> #for (i in 1:NoSim) {
> #b  = Sys.time()
> #  print(i)
> set.seed(a * 2022)
> 
> #  aa <- Sys.time()
> 
>   samp <- NULL
>   samp_index <- sample_subpopulations(data_pop,
+                                       frac_nc = 0.1, frac_nt = 0.1,
+                                       seed = a * 2022)
>   samp <- data_pop[samp_index, ]
>   non_samp <- data_pop[ - samp_index, ]
> 
> 
>   #######################################################################################################
>   # OR #
>   #######################################################################################################
>   # EBLUP OR ----------------------------------------------------------------------------------------------
>   E_ORf <- hte(type_hte = "OR",
+                data_sample = samp,
+                data_out_of_sample = non_samp,
+                params_OR = list(model_formula = formula_y_OR,
+                                 method = "EBLUP",
+                                 type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
>   E_OR <- E_ORf$tau
> 
>   # MQ OR --------------------------------------------------------------------------------------------------------
>   M_ORf <- hte(type_hte = "OR",
+                data_sample = samp,
+                data_out_of_sample = non_samp,
+                params_OR = list(model_formula = formula_y_OR,
+                                 method = "MQ",
+                                 type_model = "continuous"))
>   M_OR <- M_ORf$tau
> 
>   # RF OR ------------------------------------------------------------------------------------------------------------
> 
> #  R_ORf <- hte(type_hte = "OR",
> #               data_sample = samp,
> #               data_out_of_sample = non_samp,
> #               params_OR = list(model_formula = formula_y_OR,
> #                                method = "RF",
> #                                tune_RF = TRUE))
> #  R_OR <- R_ORf$tau
> 
> 
>   test  = "try-error"
>   while(test == "try-error") {
+     R_ORf <- try(hte(type_hte = "OR",
+                  data_sample = samp,
+                  data_out_of_sample = non_samp,
+                  params_OR = list(model_formula = formula_y_OR,
+                                   method = "RF",
+                                   tune_RF = TRUE)> 
>   R_OR <- R_ORf$tau
>   # EBLUP XGB -----------------------------------------------------------------------------------------------------------
> 
>   X_ORf <- hte(type_hte = "OR",
+                data_sample = samp,
+                data_out_of_sample = non_samp,
+                params_OR = list(model_formula = formula_y_OR,
+                                 method = "XGB",
+                                 xgboost_params = list(CV_XGB = TRUE,
+                                                       nfolds = 5,
+                                                       nrounds = 50)))
>   X_OR <- X_ORf$tau
> 
>   ##############################################################################################################
>   # NIPW #
>   ##############################################################################################################
>   # E
>   # EE
>   EE_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "EBLUP"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "EBLUP",
+                                          type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
>   EE_NIPW <- EE_NIPWf$tau
> 
>   #EM ------------------------------------------------------------------------------------------------
>   EM_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "EBLUP"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "MQ",
+                      boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
>   EM_NIPW <- EM_NIPWf$tau
> 
>   # ER ------------------------------------------------------------------------------------------------
>   ER_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "EBLUP"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "RF",
+           > 
>   ER_NIPW <- ER_NIPWf$tau
> 
>   #EX ------> 
>   ER_NIPW <- ER_NIPWf$tau
> 
>   #EX ------> 
>   ER_NIPW <- ER_NIPWf$tau
> 
>   #EX --------------------------------------------------------------------------------------------
>   EX_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "EBLUP"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
>   EX_NIPW <- EX_NIPWf$tau
>   ##############################################################################################################
>   # M
>   # MM -------------------------------------------------------------------------------------------
>   MM_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "MQ"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "MQ",
+                                          type_model = "continuous"))
>   MM_NIPW <- MM_NIPWf$tau
> 
>   # ME --------------------------------------------------------
>   ME_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "MQ"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "EBLUP",
+                                          type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
>   ME_NIPW <- ME_NIPWf$tau
> 
> 
>   # MR --------------------------------------------------------
>   MR_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "MQ"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "RF",
+                                          tune_RF = TRUE))
>   MR_NIPW <- MR_NIPWf$tau
> 
>   # MX --------------------------------------------------------
>   MX_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "MQ"),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)))
>   MX_NIPW <- MX_NIPWf$tau
> 
>   ######################################################################################################
>   # R #
>   # RR ------------------------------------------------------------------
>   RR_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "RF",
+                                         tune_RF = TRUE),
+                   params_impute_y = list(model_fo>   RR_NIPW <- RR_NIPWf$tau
>   # RE ----------------------------------------------------------->   RR_NIPW <- RR_NIPWf$tau
>   # RE ----------->   RR_NIPW <- RR_NIPWf$tau
>   # RE ------------------------------------------------------------------
>   RE_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "RF",
+                                         tune_RF = TRUE),
+                   params_impute_y = list(model_formula = form>   RE_NIPW <- RE_NIPWf$tau
> 
>   # RM --------------------------------------------------------boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
>   RE_NIPW <- RE_NIPWf$tau
> 
>   # RM ------------------------------------------------------------------
>   RM_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "RF",
+                                         tune_RF = TRUE),
+             >   RM_NIPW <- RM_NIPWf$tau
>   # RX ------------------------------------------------------------------
>   RX_NIPWf <- hte(type_hte = "NIPW",
+>   RM_NIPW <- RM_NIPWf$tau
>   # RX ----------->   RM_NIPW <- RM_NIPWf$tau
>   # RX ------------------------------------------------------------------
>   RX_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "RF",
+                                         tune_RF = TRUE),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "XGB",
+                                          xgb>   RX_NIPW <- RX_NIPWf$tau
>   ######################################################################################################
>   # X #>   RX_NIPW <- RX_NIPWf$tau
>   ################>   RX_NIPW <- RX_NIPWf$tau
>   ######################################################################################################
>   # X #
>   # XX -------------------------------------------------------------------
>   XX_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "XGB",
+                                         xgboost_params = list(CV_XGB = TRUE,
+                                                               nfolds = 5,
+                                                               nrounds = 50)),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)))
> 
>   XX_NIPW <- XX_NIPWf$tau
> 
>   # XE -------------------------------------------------------------------
>   XE_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "XGB",
+                                         xgboost_params = list(CV_XGB = TRUE,
+                                                               nfolds = 5,
+                                                               nrounds = 50)),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "EBLUP",
+                                          type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
> 
>   XE_NIPW <- XE_NIPWf$tau
>   # XM -------------------------------------------------------------------
>   XM_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "XGB",
+                                         xgboost_params = list(CV_XGB = TRUE,
+                                                               nfolds = 5,
+                                                               nrounds = 50)),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "MQ",
+                                          type_model = "continuous"))
> 
>   XM_NIPW <- XM_NIPWf$tau
> 
>   # XR -------------------------------------------------------------------
>   XR_NIPWf <- hte(type_hte = "NIPW",
+                   data_sample = samp,
+                   data_out_of_sample = non_samp,
+                   params_p_score = list(model_formula = formula_p_score,
+                                         method =  "XGB",
+                                         xgboost_params = list(CV_XGB = TRUE,
+                                                               nfolds = 5,
+                                                               nrounds = 50)),
+                   params_impute_y = list(model_formula = formula_y_impute,
+                                          method = "RF",
+                                          tune_RF = TRUE))
> 
>   XR_NIPW <- XR_NIPWf$tau
> 
> 
>   ##############################################################################################################
>   # AIPW #
>   ###############################################################################################################
>   # AIPW -------------------------------------------------------------------
>   # EEM
>   EEM_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "MQ",
+                                           type_model = "continuous"))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
>   EEM_AIPW <- EEM_AIPWf$tau
>   # EER --------------------------------------------------
>   EER_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
>   EER_AIPW <- EER_AIPWf$tau
> 
>   # EEX ----------------------
>   EEX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
>   EEX_AIPW <- EEX_AIPWf$tau
> 
>   # EMM ----------------------------------------------------------------------
>   EMM_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "MQ"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "MQ",
+                                           type_model = "continuous"))
boundary (singular) fit: see help('isSingular')
> 
>   EMM_AIPW <- EMM_AIPWf$tau
> 
>   # EMR --------------------------------------------
>   EMR_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "MQ"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
boundary (singular) fit: see help('isSingular')
> 
>   EMR_AIPW <- EMR_AIPWf$tau
> 
>   # EMX -----------------------------------------
>   EMX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "MQ"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
boundary (singular) fit: see help('isSingular')
> 
>   EMX_AIPW <- EMX_AIPWf$tau
> 
>   # ERM ------------------------------------------------------
>   ERM_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "RF",
+                                          tune_RF = TRUE),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "MQ",
+                                           type_model = "continuous"))
boundary (singular) fit: see help('isSingular')
> 
>   ERM_AIPW <- ERM_AIPWf$tau
> 
>   # ERR ------------------------------------------------------------------
>   ERR_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "RF",
+                                          tune_RF = TRUE),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
boundary (singular) fit: see help('isSingular')
> 
>   ERR_AIPW <- ERR_AIPWf$tau
> 
>   # ERX -------------------------------------------------------------------
>   ERX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "RF",
+                                          tune_RF = TRUE),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
boundary (singular) fit: see help('isSingular')
> 
>   ERX_AIPW <- ERX_AIPWf$tau
> 
>   # EXM --------------------------------------------------
>   EXM_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "MQ",
+                                           type_model = "continuous"))
boundary (singular) fit: see help('isSingular')
> 
>   EXM_AIPW <- EXM_AIPWf$tau
> 
>   # EXR --------------------------------------------------
>   EXR_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
boundary (singular) fit: see help('isSingular')
> 
>   EXR_AIPW <- EXR_AIPWf$tau
> 
>   # EXX ----------------------------------------------------------------
>   EXX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "EBLUP",
+                                     type_model = "gaussian"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
boundary (singular) fit: see help('isSingular')
> 
>   EXX_AIPW <- EXX_AIPWf$tau
> 
>   # MM -----------------------------------------------------------
>   #######################################################################
>   # MEE ------------------------------------------------------
>   MEE_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "EBLUP",
+                                           type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
> 
>   MEE_AIPW <- MEE_AIPWf$tau
> 
>   # MER ------------------------------------------------------
>   MER_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
boundary (singular) fit: see help('isSingular')
> 
>   MER_AIPW <- MER_AIPWf$tau
> 
>   # MER ------------------------------------------------------
>   MEX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
boundary (singular) fit: see help('isSingular')
> 
>   MEX_AIPW <- MEX_AIPWf$tau
> 
>   # MME ------------------------------------------------------
>   MME_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "MQ"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "EBLUP",
+                                           type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
> 
>   MME_AIPW <- MME_AIPWf$tau
> 
>   # MER ------------------------------------------------------
>   MMR_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "MQ"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
> 
>   MMR_AIPW <- MMR_AIPWf$tau
> 
>   # MMX ------------------------------------------------------
>   MMX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "MQ"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
> 
>   MMX_AIPW <- MMX_AIPWf$tau
> 
>   # MRE ------------------------------------------------------
>   MRE_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "RF",
+                                          tune_RF = TRUE),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "EBLUP",
+                                           type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
> 
>   MRE_AIPW <- MRE_AIPWf$tau
> 
>   # MRR ------------------------------------------------------
>   MRR_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "RF",
+                                          tune_RF = TRUE),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
> 
>   MRR_AIPW <- MRR_AIPWf$tau
> 
>   # MRX ------------------------------------------------------
>   MRX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "RF",
+                                          tune_RF = TRUE),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
> 
>   MRX_AIPW <- MRX_AIPWf$tau
> 
>   # MXE ------------------------------------------------------
>   MXE_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "EBLUP",
+                                           type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
> 
>   MXE_AIPW <- MXE_AIPWf$tau
> 
>   # MRR ------------------------------------------------------
>   MXR_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "RF",
+                                           tune_RF = TRUE))
> 
>   MXR_AIPW <- MXR_AIPWf$tau
> 
>   # MRX ------------------------------------------------------
>   MXX_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR ,
+                                     method = "MQ",
+                                     type_model = "continuous"),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "XGB",
+                                          xgboost_params = list(CV_XGB = TRUE,
+                                                                nfolds = 5,
+                                                                nrounds = 50)),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "XGB",
+                                           xgboost_params = list(CV_XGB = TRUE,
+                                                                 nfolds = 5,
+                                                                 nrounds = 50)))
> 
>   MXX_AIPW <- MXX_AIPWf$tau
> 
>   # RR -----------------------------------------------------------
>   #######################################################################
>   # REE ------------------------------------------------------
>   REE_AIPWf <- hte(type_hte = "AIPW",
+                    data_sample = samp,
+                    data_out_of_sample = non_samp,
+                    params_OR = list(model_formula = formula_y_OR,
+                                     method = "RF",
+                                     tune_RF = TRUE),
+                    params_p_score = list(model_formula = formula_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "EBLUP",
+                                           type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
Error in (function (train_matrix, outcome_index, sample_weight_index,  : 
  The honesty fraction is too close to 1 or 0, as no observations will be sampled.
Calls: hte ... apply -> FUN -> do.call.rcpp -> do.call -> <Anonymous>
Execution halted
a_p_score,
+                                          method =  "EBLUP"),
+                    params_impute_y = list(model_formula = formula_y_impute,
+                                           method = "EBLUP",
+                                           type_model = "gaussian"))
boundary (singular) fit: see help('isSingular')
boundary (singular) fit: see help('isSingular')
Error in (function (train_matrix, outcome_index, sample_weight_index,  : 
  The honesty fraction is too close to 1 or 0, as no observations will be sampled.
Calls: hte ... apply -> FUN -> do.call.rcpp -> do.call -> <Anonymous>
Execution halted
